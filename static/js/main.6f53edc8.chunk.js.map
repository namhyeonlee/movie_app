{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","prototype","PropTypes","number","isRequired","string","arrayOf","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAIA,SAASA,EAAT,GAA2D,EAA3CC,GAA4C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC9C,OAAO,sBAAKC,UAAU,QAAf,UACH,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACA,qBAAIA,UAAU,eAAd,cAA+BJ,EAA/B,QACI,qBAAII,UAAU,cAAd,UAA6BL,EAA7B,OACC,oBAAIK,UAAU,SAAd,SACID,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,qBAAiBL,UAAU,gBAA3B,cAA6CI,IAAnCC,QAGlB,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,eAMZb,EAAMc,UAAY,CACdb,GAAIc,IAAUC,OAAOC,WACrBf,KAAMa,IAAUC,OAAOC,WACvBd,MAAOY,IAAUG,OAAOD,WACxBb,QAASW,IAAUG,OAAOD,WAC1BZ,OAAQU,IAAUG,OAAOD,WACzBX,OAAQS,IAAUI,QAAQJ,IAAUG,QAAQD,YAEjCjB,QCyBAoB,G,kNA7CbC,MAAQ,CACNC,WAAW,EACXC,OAAO,I,EAETC,U,sBAAY,8BAAAC,EAAA,sEACmCC,IAAMC,IAAI,4DAD7C,gBACcJ,EADd,EACFK,KAAQA,KAAQL,OAGxB,EAAKM,SAAS,CAAEN,SAAQD,WAAU,IAJxB,2C,uDAOZ,WACEQ,KAAKN,c,oBAGP,WAAU,IAAD,EACsBM,KAAKT,MAA1BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OAAO,yBAAShB,UAAU,YAAnB,SACJe,EACC,qBAAKf,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,wBAKA,qBAAKA,UAAU,SAAf,SACIgB,EAAOb,KAAI,SAAAqB,GACX,OAAO,cAAC,EAAD,CAEL9B,GAAI8B,EAAM9B,GACVC,KAAM6B,EAAM7B,KACZC,MAAO4B,EAAM5B,MACbC,QAAS2B,EAAM3B,QACfC,OAAQ0B,EAAMC,mBACd1B,OAAQyB,EAAMzB,QANTyB,EAAM9B,e,GA/BTgC,IAAMC,YCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6f53edc8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport \"./Movie.css\";\n\nfunction Movie({id, year, title, summary, poster, genres}) {\n    return <div className=\"movie\">\n        <img src={poster} alt={title} title={title}/>\n        <div className=\"movie__data\">\n        <h3 className=\"movie__title\"> {title}  </h3>\n            <h5 className=\"movie__year\">{year} </h5>\n             <ul className=\"genres\">\n                {genres.map((genre, index) => (\n                    <li key={ index} className=\"genres__genre\"> {genre}</li>\n                ))}\n            </ul>\n            <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\n           \n            </div>\n    </div>\n}\n\nMovie.prototype = {\n    id: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\n}\nexport default Movie;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Movie from './Movie';\nimport './App.css';\n\nclass App extends React.Component{\n\n \n  state = {\n    isLoading: true,\n    movies:[]\n  };\n  getMovies = async () => {\n    const { data: { data: { movies } } } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    )\n    //첫번째 무비는 state, 두번째 무비는 axios에서 온 것을 뜻함\n    this.setState({ movies, isLoading:false})\n    \n  }\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  render() {\n    const { isLoading, movies} = this.state;\n    return <section className=\"container\">\n      {isLoading ? (\n        <div className=\"loader\">\n          <span className=\"loader__text\">Lodading</span>\n        </div>\n      )\n        \n        : (\n          <div className=\"movies\">\n            { movies.map(movie => {\n              return <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              ></Movie>\n            })}\n         </div>\n        )\n        } \n        \n    </section>\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}